scalar AWSDate
scalar AWSDateTime
scalar AWSJSON

type Query {
  ping: String!
  me: User
  getPage(slug: String!): Page
  getProjects: ProjectConnection!
  getProject(query: ProjectQuery!): Project!
  getTrackings(query: TrackingsQuery!): TrackingConnection!
}
type Mutation {
  createProject(input: ProjectInput!): ProjectMutationResponse!
  updateProject(id: ID!, input: ProjectInput!): ProjectMutationResponse!
  deleteProject(id: ID!): ProjectMutationResponse!
  createTracking(input: TrackingInput!): TrackingMutationResponse!
  updateTracking(id: ID!, input: TrackingInput!): TrackingMutationResponse!
  deleteTracking(id: ID!): TrackingMutationResponse!
}
# System Types
  interface Node {
    id: ID!
  }
  interface Connection {
    totalCount: Int!
    edges: [Node!]!
    cursor: String
  }
  interface MutationResponse {
    code: String!
    success: Boolean!
    message: String!
  }
# Content Nodes
  type Page implements Node {
    id: ID!
    title: String!
    slug: String!
    content: String!
    layout: String!
  }

  type User {
    firstName: String!
    lastName: String!
    projects: ProjectConnection!
    project(projectId: String!): Project
  }
  type Project implements Node {
    id: ID!
    client: String!
    industry: String!
    description: String!
    startDate: AWSDate!
    endDate: AWSDate
    methodologies: [String!]!
    technologies: [String!]!
    trackings: TrackingConnection!
  }
  type Tracking implements Node {
    id: ID!
    project: Project!
    startTime: AWSDateTime!
    endTime: AWSDateTime!
    description: String
  }
# Query Input
  input  ProjectQuery{
    projectId: ID!
  }
  input TrackingsQuery {
    projectId: ID!
    date: String
  }
# Mutation Input
  input ProjectInput {
    client: String!
    industry: String!
    description: String!
    startDate: AWSDate!
    endDate: AWSDate
    methodologies: [String!]!
    technologies: [String!]!
  }
  input TrackingInput {
    projectId: String!
    startTime: AWSDateTime!
    endTime: AWSDateTime!
    description: String
  }
# Mutation Responses
  type ProjectMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    project: Project
  }
    type TrackingMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    tracking: Tracking
  }
# Connection Types
  type ProjectConnection implements Connection {
    totalCount: Int!
    edges: [Project!]!
    cursor: String
  }
  type TrackingConnection implements Connection {
    totalCount: Int!
    edges: [Tracking!]!
    cursor: String
  }
